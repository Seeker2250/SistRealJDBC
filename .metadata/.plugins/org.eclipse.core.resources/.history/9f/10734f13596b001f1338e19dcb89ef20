package days04.board.persistence;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

import days04.board.domain.BoardDTO;

public class BoardDAOImpl implements BoardDAO{
	//	DB연동하는 Class
	private Connection conn = null;//DBConn.getConnection();하면 DI 안지켜지니까 패스
	public Connection getConn() {
		return conn;
	}

	private PreparedStatement pstmt = null;
	private ResultSet rs = null;

	//	constructor나 setter로 DI(의존성 주입)하자

	public BoardDAOImpl(Connection conn) {
		super();
		this.conn = conn;
	}
	// Setter DI만들어
	public void setConn(Connection conn) {
		this.conn = conn;
	}

	@Override
	public ArrayList<BoardDTO> select() throws SQLException{
		long seq;
		String writer, email, title;
		int readed;
		Date writedate;

		ArrayList<BoardDTO> list = null;
		String sql = " SELECT seq, writer, email, title, readed, writedate "
				+ " FROM tbl_cstVSBoarD "
				+ " ORDER BY seq DESC ";
		//		부서조회 시작




		BoardDTO dto = null;
		try {
			//			stmt = conn.createStatement();
			//			rs = stmt.executeQuery(sql);->excute할 때 쿼리를 줘

			//			excute 전에 미리 쿼리 주고 준비해
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				list = new ArrayList<BoardDTO>();
				do {
					seq = rs.getLong("seq");
					writer = rs.getString("writer");
					email = rs.getString("email");
					title = rs.getString("title");
					readed = rs.getInt("readed");
					writedate = rs.getDate("writedate");

					//					dto = new BoardDTO(seq, writer, null, email, title, writedate, readed,  0, null);
					dto = new BoardDTO().builder()
							.seq(seq)
							.writer(writer)
							.email(email)
							.title(title)
							.writedate(writedate)
							.readed(readed)
							.build();
					list.add(dto);
				} while (rs.next());
			}//if

			//		부서정보 출력

		}

		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				rs.close();
				pstmt.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		//		부서조회 끝



		return list;
	}


	@Override
	public ArrayList<BoardDTO> select(int currentPage, int numberPerPage) throws SQLException{
		long seq;
		String writer, email, title;
		int readed;
		Date writedate;

		ArrayList<BoardDTO> list = null;
		String sql = "SELECT * "
				+ "FROM ( "
				+ "    SELECT ROWNUM no, t.* "
				+ "    FROM( "
				+ "        SELECT seq, writer, email, title, readed, writedate "
				+ "        FROM tbl_cstVSBoard "
				+ "        ORDER BY seq DESC "
				+ "    ) t "
				+ ")b "
				+ "WHERE no BETWEEN ? AND ?";
		//		부서조회 시작


		BoardDTO dto = null;

		int start = (currentPage-1)*numberPerPage+1;
		int end = start+numberPerPage-1;;
		int totalRecords = getTotalRecords();
		if(end > totalRecords) {
			end = totalRecords;}//if



		try {
			pstmt = conn.prepareStatement(sql);
			System.out.println(sql);
			pstmt.setInt(1, start);
			pstmt.setInt(2, end);

			rs = pstmt.executeQuery();
			if(rs.next()) {
				list = new ArrayList<BoardDTO>();
				do {
					seq = rs.getLong("seq");
					writer = rs.getString("writer");
					email = rs.getString("email");
					title = rs.getString("title");
					readed = rs.getInt("readed");
					writedate = rs.getDate("writedate");

					//					dto = new BoardDTO(seq, writer, null, email, title, writedate, readed,  0, null);
					dto = new BoardDTO().builder()
							.seq(seq)
							.writer(writer)
							.email(email)
							.title(title)
							.writedate(writedate)
							.readed(readed)
							.build();
					list.add(dto);
				} while (rs.next());
			}//if

			//		부서정보 출력

		}

		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				rs.close();
				pstmt.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		//		부서조회 끝



		return list;

	}
	@Override
	public int getTotalRecords() throws SQLException {
		int totalRecords = 0;      
		String sql = "SELECT COUNT(*) FROM tbl_cstvsboard";
		this.pstmt = this.conn.prepareStatement(sql);
		this.rs =  this.pstmt.executeQuery();      
		if( this.rs.next() ) totalRecords = rs.getInt(1);      
		this.rs.close();
		this.pstmt.close();            
		return totalRecords;
	}
	@Override
	public int getTotalPages(int numberPerPage) throws SQLException {
		int totalPages = 0;      
		String sql = "SELECT CEIL(COUNT(*)/?) FROM tbl_cstvsboard";
		this.pstmt = this.conn.prepareStatement(sql);
		this.pstmt.setInt(1, numberPerPage);
		this.rs =  this.pstmt.executeQuery();      
		if( this.rs.next() ) {
			totalPages = rs.getInt(1);
		}
		this.rs.close();
		this.pstmt.close();            
		return totalPages;
	}
	@Override
	public int insert(BoardDTO dto) throws SQLException {
		String sql = "INSERT INTO tbl_cstvsboard "
				+ " (seq, writer, pwd, email, title, tag, content ) "
				+ "VALUES "
				+ " (seq_tblcstvsboard.NEXTVAL, ?, ?, ?, ?, ?, ? ) ";
		int rowCount = 0;
		this.pstmt = this.conn. prepareStatement(sql);
		//		(seq, writer, pwd, email, title, tag, content )
		this.pstmt.setString(1, dto.getWriter());
		this.pstmt.setString(2, dto.getPwd());
		this.pstmt.setString(3, dto.getEmail());
		this.pstmt.setString(4, dto.getTitle());
		this.pstmt.setInt(5, dto.getTag());
		this.pstmt.setString(6, dto.getContent());
		this.pstmt.executeUpdate();

		return rowCount;
	}

	@Override
	public int increaseReaded(long seq) throws SQLException {
		String sql = "UPDATE tbl_cstvsboard "
				+ "SET readed = readed + 1  "
				+ "WHERE seq = ? ";
		int rowCount = 0;
		this.pstmt = this.conn. prepareStatement(sql);
		//		(seq, writer, pwd, email, title, tag, content )
		this.pstmt.setLong(1, seq);
		this.pstmt.executeUpdate();

		return rowCount;
	}

	@Override
	public BoardDTO view(long seq) throws SQLException {
		String writer, email, title;
		int readed;
		Date writedate;
		String content;
		
		String sql = " SELECT seq, title, writer, email, writedate, readed, content "
				+ " FROM tbl_cstVSBoard "
				+ " WHERE seq = ? ";
		
		//		부서조회 시작
		BoardDTO dto = null;
		try {
			//			stmt = conn.createStatement();
			//			rs = stmt.executeQuery(sql);->excute할 때 쿼리를 줘

			//			excute 전에 미리 쿼리 주고 준비해
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()) {
					seq = rs.getLong("seq");
					title = rs.getString("title");
					writer = rs.getString("writer");
					email = rs.getString("email");
					writedate = rs.getDate("writedate");
					readed = rs.getInt("readed");
					content = rs.getString("content");

					dto = new BoardDTO().builder()
			                  .seq(seq)
			                  .title(title)
			                  .writedate(writedate)
			                  .writer(writer)
			                  .email(email)
			                  .readed(readed)
			                  .content(content)
			                  .build();

				
			}//if

			//		부서정보 출력

		}

		catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				rs.close();
				pstmt.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		//		부서조회 끝
		return dto;
	}
}
