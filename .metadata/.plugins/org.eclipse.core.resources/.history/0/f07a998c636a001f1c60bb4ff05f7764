package days03;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import com.util.DBConn;

//Transaction 처리
// Transaction : 논리적 작업 단위 -> 모두 완료 or 모두 취소
//계좌 이체 : A 돈 UPDATE, B 돈 UPDATE가 합쳐져야 하나의 계좌이체
//모두 성공-> COMMIT, 하나라도 실패하면 ROLLBACK
//AUTO COMMIT 막고 해보자


public class Ex02 {
	public static void main(String[] args) {
		String sql = "INSERT INTO dept VALUES (?, ?, ?)";
		Connection conn = null;
		PreparedStatement pstmt = null;
		int rowCount = 0;
		
		try {
			conn = DBConn.getConnection();
			conn.setAutoCommit(false);//auto commit 막아버려
			pstmt = conn.prepareStatement(sql);
			
//			1번째 insert
			pstmt.setInt(1, 50);
			pstmt.setString(2,  "QC");
			pstmt.setString(3,  "SEOUL");
			
			rowCount = pstmt.executeUpdate();
			if(rowCount == 1) {
				System.out.println("첫 번째 부서 추가 성공");
			}
//			2번째 insert 하다가 오류 발생시킬거야
			pstmt.setInt(1, 50);
			pstmt.setString(2,  "QC2");
			pstmt.setString(3,  "SEOUL2");
			rowCount = pstmt.executeUpdate();
			if(rowCount == 1) {
				System.out.println("두 번째 부서 추가 성공");
			}
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
			try {
				conn.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}finally {
			try {
				pstmt.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		
		DBConn.close();
	}
}
